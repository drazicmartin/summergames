--
-- PostgreSQL database dump
--

-- Dumped from database version 15.1 (Ubuntu 15.1-1.pgdg20.04+1)
-- Dumped by pg_dump version 15.3 (Ubuntu 15.3-1.pgdg20.04+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: public; Type: SCHEMA; Schema: -; Owner: pg_database_owner
--

CREATE SCHEMA public;


ALTER SCHEMA public OWNER TO pg_database_owner;

--
-- Name: SCHEMA public; Type: COMMENT; Schema: -; Owner: pg_database_owner
--

COMMENT ON SCHEMA public IS 'standard public schema';


--
-- Name: add_player_to_game(text, integer); Type: FUNCTION; Schema: public; Owner: supabase_admin
--

CREATE FUNCTION public.add_player_to_game(user_email text, game_id integer) RETURNS character varying
    LANGUAGE plpgsql SECURITY DEFINER
    SET search_path TO 'public'
    AS $$
DECLARE
user_id uuid;
begin
  select u.id into user_id
  from auth.users as u
  where u.email = user_email;

  if not found then
    raise 'User does not exists';
  end if;

  insert into players(user_id, game_id, email)
  values (user_id, game_id, user_email);

  return 'Success';
end;
$$;


ALTER FUNCTION public.add_player_to_game(user_email text, game_id integer) OWNER TO supabase_admin;

--
-- Name: add_self_to_game(integer); Type: FUNCTION; Schema: public; Owner: supabase_admin
--

CREATE FUNCTION public.add_self_to_game(input_game_id integer) RETURNS void
    LANGUAGE plpgsql
    AS $$begin
  insert into players(user_id, game_id, email)
  values (auth.uid(), input_game_id, admin);
end;$$;


ALTER FUNCTION public.add_self_to_game(input_game_id integer) OWNER TO supabase_admin;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: games; Type: TABLE; Schema: public; Owner: supabase_admin
--

CREATE TABLE public.games (
    id bigint NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    user_id uuid DEFAULT auth.uid(),
    name character varying DEFAULT ''::character varying,
    is_started boolean DEFAULT false,
    is_finish boolean DEFAULT false,
    state json
);


ALTER TABLE public.games OWNER TO supabase_admin;

--
-- Name: generate_game_rotation(integer); Type: FUNCTION; Schema: public; Owner: supabase_admin
--

CREATE FUNCTION public.generate_game_rotation(input_game_id integer) RETURNS SETOF public.games
    LANGUAGE plpgsql
    AS $$
begin
  return query select *
  from games
  where id=input_game_id;
end;
$$;


ALTER FUNCTION public.generate_game_rotation(input_game_id integer) OWNER TO supabase_admin;

--
-- Name: game_id_seq; Type: SEQUENCE; Schema: public; Owner: supabase_admin
--

ALTER TABLE public.games ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.game_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: missions; Type: TABLE; Schema: public; Owner: supabase_admin
--

CREATE TABLE public.missions (
    id bigint NOT NULL,
    game_id bigint DEFAULT '1'::bigint,
    created_at timestamp with time zone DEFAULT now(),
    title character varying,
    description text,
    difficulty bigint DEFAULT '0'::bigint
);


ALTER TABLE public.missions OWNER TO supabase_admin;

--
-- Name: missions_id_seq; Type: SEQUENCE; Schema: public; Owner: supabase_admin
--

ALTER TABLE public.missions ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.missions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: players; Type: TABLE; Schema: public; Owner: supabase_admin
--

CREATE TABLE public.players (
    id bigint NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    user_id uuid NOT NULL,
    game_id bigint NOT NULL,
    password text DEFAULT 'password'::text NOT NULL,
    is_dead boolean DEFAULT false NOT NULL,
    name text DEFAULT 'Patate'::text,
    email text,
    score bigint DEFAULT '0'::bigint NOT NULL,
    used_powerup_change_mission boolean DEFAULT false NOT NULL
);


ALTER TABLE public.players OWNER TO supabase_admin;

--
-- Name: player_id_seq; Type: SEQUENCE; Schema: public; Owner: supabase_admin
--

ALTER TABLE public.players ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.player_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: games game_pkey; Type: CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.games
    ADD CONSTRAINT game_pkey PRIMARY KEY (id);


--
-- Name: missions missions_pkey; Type: CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.missions
    ADD CONSTRAINT missions_pkey PRIMARY KEY (id);


--
-- Name: players players_pkey; Type: CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.players
    ADD CONSTRAINT players_pkey PRIMARY KEY (user_id, game_id);


--
-- Name: games games_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.games
    ADD CONSTRAINT games_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: missions missions_game_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.missions
    ADD CONSTRAINT missions_game_id_fkey FOREIGN KEY (game_id) REFERENCES public.games(id) ON DELETE CASCADE;


--
-- Name: players players_game_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.players
    ADD CONSTRAINT players_game_id_fkey FOREIGN KEY (game_id) REFERENCES public.games(id) ON DELETE CASCADE;


--
-- Name: players players_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: supabase_admin
--

ALTER TABLE ONLY public.players
    ADD CONSTRAINT players_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: games Enable delete for users based on user_id; Type: POLICY; Schema: public; Owner: supabase_admin
--

CREATE POLICY "Enable delete for users based on user_id" ON public.games FOR DELETE TO authenticated USING ((auth.uid() = user_id));


--
-- Name: players Enable delete for users based on user_id; Type: POLICY; Schema: public; Owner: supabase_admin
--

CREATE POLICY "Enable delete for users based on user_id" ON public.players FOR DELETE TO authenticated USING (((auth.uid() = user_id) OR (( SELECT games.user_id
   FROM public.games
  WHERE (games.id = players.game_id)) = auth.uid())));


--
-- Name: players Enable insert based game owner; Type: POLICY; Schema: public; Owner: supabase_admin
--

CREATE POLICY "Enable insert based game owner" ON public.players FOR INSERT TO authenticated WITH CHECK ((auth.uid() = ( SELECT games.user_id
   FROM public.games
  WHERE (games.id = players.game_id))));


--
-- Name: games Enable insert for authenticated users only; Type: POLICY; Schema: public; Owner: supabase_admin
--

CREATE POLICY "Enable insert for authenticated users only" ON public.games FOR INSERT TO authenticated WITH CHECK ((user_id = auth.uid()));


--
-- Name: players Enable read based on user_id an game owner; Type: POLICY; Schema: public; Owner: supabase_admin
--

CREATE POLICY "Enable read based on user_id an game owner" ON public.players FOR SELECT TO authenticated USING (((user_id = auth.uid()) OR (auth.uid() = ( SELECT games.user_id
   FROM public.games
  WHERE (games.id = players.game_id)))));


--
-- Name: missions Enable read for authenticated users only; Type: POLICY; Schema: public; Owner: supabase_admin
--

CREATE POLICY "Enable read for authenticated users only" ON public.missions FOR SELECT TO authenticated USING (true);


--
-- Name: games Enable read for own games; Type: POLICY; Schema: public; Owner: supabase_admin
--

CREATE POLICY "Enable read for own games" ON public.games FOR SELECT TO authenticated USING (true);


--
-- Name: players Enable update based on user _id and game owner; Type: POLICY; Schema: public; Owner: supabase_admin
--

CREATE POLICY "Enable update based on user _id and game owner" ON public.players FOR UPDATE TO authenticated USING (((user_id = auth.uid()) OR (auth.uid() = ( SELECT games.user_id
   FROM public.games
  WHERE (games.id = players.game_id))))) WITH CHECK (((user_id = auth.uid()) OR (auth.uid() = ( SELECT games.user_id
   FROM public.games
  WHERE (games.id = players.game_id)))));


--
-- Name: games Enable update for users based on email; Type: POLICY; Schema: public; Owner: supabase_admin
--

CREATE POLICY "Enable update for users based on email" ON public.games FOR UPDATE TO authenticated USING (true);


--
-- Name: games; Type: ROW SECURITY; Schema: public; Owner: supabase_admin
--

ALTER TABLE public.games ENABLE ROW LEVEL SECURITY;

--
-- Name: missions; Type: ROW SECURITY; Schema: public; Owner: supabase_admin
--

ALTER TABLE public.missions ENABLE ROW LEVEL SECURITY;

--
-- Name: players; Type: ROW SECURITY; Schema: public; Owner: supabase_admin
--

ALTER TABLE public.players ENABLE ROW LEVEL SECURITY;

--
-- Name: SCHEMA public; Type: ACL; Schema: -; Owner: pg_database_owner
--

GRANT USAGE ON SCHEMA public TO postgres;
GRANT USAGE ON SCHEMA public TO anon;
GRANT USAGE ON SCHEMA public TO authenticated;
GRANT USAGE ON SCHEMA public TO service_role;


--
-- Name: FUNCTION add_player_to_game(user_email text, game_id integer); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.add_player_to_game(user_email text, game_id integer) TO postgres;
GRANT ALL ON FUNCTION public.add_player_to_game(user_email text, game_id integer) TO anon;
GRANT ALL ON FUNCTION public.add_player_to_game(user_email text, game_id integer) TO authenticated;
GRANT ALL ON FUNCTION public.add_player_to_game(user_email text, game_id integer) TO service_role;


--
-- Name: FUNCTION add_self_to_game(input_game_id integer); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.add_self_to_game(input_game_id integer) TO postgres;
GRANT ALL ON FUNCTION public.add_self_to_game(input_game_id integer) TO anon;
GRANT ALL ON FUNCTION public.add_self_to_game(input_game_id integer) TO authenticated;
GRANT ALL ON FUNCTION public.add_self_to_game(input_game_id integer) TO service_role;


--
-- Name: TABLE games; Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON TABLE public.games TO postgres;
GRANT ALL ON TABLE public.games TO anon;
GRANT ALL ON TABLE public.games TO authenticated;
GRANT ALL ON TABLE public.games TO service_role;


--
-- Name: FUNCTION generate_game_rotation(input_game_id integer); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.generate_game_rotation(input_game_id integer) TO postgres;
GRANT ALL ON FUNCTION public.generate_game_rotation(input_game_id integer) TO anon;
GRANT ALL ON FUNCTION public.generate_game_rotation(input_game_id integer) TO authenticated;
GRANT ALL ON FUNCTION public.generate_game_rotation(input_game_id integer) TO service_role;


--
-- Name: SEQUENCE game_id_seq; Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON SEQUENCE public.game_id_seq TO postgres;
GRANT ALL ON SEQUENCE public.game_id_seq TO anon;
GRANT ALL ON SEQUENCE public.game_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.game_id_seq TO service_role;


--
-- Name: TABLE missions; Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON TABLE public.missions TO postgres;
GRANT ALL ON TABLE public.missions TO anon;
GRANT ALL ON TABLE public.missions TO authenticated;
GRANT ALL ON TABLE public.missions TO service_role;


--
-- Name: SEQUENCE missions_id_seq; Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON SEQUENCE public.missions_id_seq TO postgres;
GRANT ALL ON SEQUENCE public.missions_id_seq TO anon;
GRANT ALL ON SEQUENCE public.missions_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.missions_id_seq TO service_role;


--
-- Name: TABLE players; Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON TABLE public.players TO postgres;
GRANT ALL ON TABLE public.players TO anon;
GRANT ALL ON TABLE public.players TO authenticated;
GRANT ALL ON TABLE public.players TO service_role;


--
-- Name: SEQUENCE player_id_seq; Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON SEQUENCE public.player_id_seq TO postgres;
GRANT ALL ON SEQUENCE public.player_id_seq TO anon;
GRANT ALL ON SEQUENCE public.player_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.player_id_seq TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO service_role;


--
-- PostgreSQL database dump complete
--




SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE EXTENSION IF NOT EXISTS "pg_net" WITH SCHEMA "extensions";






COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";






CREATE OR REPLACE FUNCTION "public"."add_player_to_game"("user_email" "text", "game_id" integer) RETURNS character varying
    LANGUAGE "plpgsql" SECURITY DEFINER
    SET "search_path" TO 'public'
    AS $$
DECLARE
user_id uuid;
begin
  select u.id into user_id
  from auth.users as u
  where u.email = user_email;

  if not found then
    raise 'User does not exists';
  end if;

  insert into players(user_id, game_id, email)
  values (user_id, game_id, user_email);

  return 'Success';
end;
$$;


ALTER FUNCTION "public"."add_player_to_game"("user_email" "text", "game_id" integer) OWNER TO "supabase_admin";


CREATE OR REPLACE FUNCTION "public"."add_self_to_game"("input_game_id" integer) RETURNS "void"
    LANGUAGE "plpgsql"
    AS $$begin
  insert into players(user_id, game_id, email)
  values (auth.uid(), input_game_id, admin);
end;$$;


ALTER FUNCTION "public"."add_self_to_game"("input_game_id" integer) OWNER TO "supabase_admin";

SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."games" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"(),
    "user_id" "uuid" DEFAULT "auth"."uid"(),
    "name" character varying DEFAULT ''::character varying,
    "is_started" boolean DEFAULT false,
    "is_finish" boolean DEFAULT false,
    "state" "json"
);


ALTER TABLE "public"."games" OWNER TO "supabase_admin";


CREATE OR REPLACE FUNCTION "public"."generate_game_rotation"("input_game_id" integer) RETURNS SETOF "public"."games"
    LANGUAGE "plpgsql"
    AS $$
begin
  return query select *
  from games
  where id=input_game_id;
end;
$$;


ALTER FUNCTION "public"."generate_game_rotation"("input_game_id" integer) OWNER TO "supabase_admin";


ALTER TABLE "public"."games" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."game_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."missions" (
    "id" bigint NOT NULL,
    "game_id" bigint DEFAULT '1'::bigint,
    "created_at" timestamp with time zone DEFAULT "now"(),
    "title" character varying,
    "description" "text",
    "difficulty" bigint DEFAULT '0'::bigint
);


ALTER TABLE "public"."missions" OWNER TO "supabase_admin";


ALTER TABLE "public"."missions" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."missions_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."players" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"(),
    "user_id" "uuid" NOT NULL,
    "game_id" bigint,
    "password" "text" DEFAULT 'password'::"text" NOT NULL,
    "is_dead" boolean DEFAULT false NOT NULL,
    "name" "text" DEFAULT 'Patate'::"text",
    "email" "text",
    "score" bigint DEFAULT '0'::bigint NOT NULL,
    "used_powerup_change_mission" boolean DEFAULT false NOT NULL,
    "firstname" character varying DEFAULT ''::character varying,
    "lastname" character varying DEFAULT ''::character varying,
    "vege" boolean DEFAULT false,
    "killer" boolean DEFAULT false,
    "message" "text" DEFAULT ''::"text",
    "insta" boolean DEFAULT false
);


ALTER TABLE "public"."players" OWNER TO "supabase_admin";


ALTER TABLE "public"."players" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."player_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE ONLY "public"."games"
    ADD CONSTRAINT "game_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."missions"
    ADD CONSTRAINT "missions_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."players"
    ADD CONSTRAINT "players_pkey" PRIMARY KEY ("user_id");



ALTER TABLE ONLY "public"."games"
    ADD CONSTRAINT "games_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."missions"
    ADD CONSTRAINT "missions_game_id_fkey" FOREIGN KEY ("game_id") REFERENCES "public"."games"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."players"
    ADD CONSTRAINT "players_game_id_fkey" FOREIGN KEY ("game_id") REFERENCES "public"."games"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."players"
    ADD CONSTRAINT "players_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;



CREATE POLICY "Enable delete for users based on user_id" ON "public"."games" FOR DELETE TO "authenticated" USING (("auth"."uid"() = "user_id"));



CREATE POLICY "Enable insert for authenticated users only" ON "public"."games" FOR INSERT TO "authenticated" WITH CHECK (("user_id" = "auth"."uid"()));



CREATE POLICY "Enable read access for all users" ON "public"."players" FOR SELECT USING (true);



CREATE POLICY "Enable read for authenticated users only" ON "public"."missions" FOR SELECT TO "authenticated" USING (true);



CREATE POLICY "Enable read for own games" ON "public"."games" FOR SELECT TO "authenticated" USING (true);



CREATE POLICY "Enable update for users based on email" ON "public"."games" FOR UPDATE TO "authenticated" USING (true);



CREATE POLICY "Enable write access for all users" ON "public"."players" FOR INSERT WITH CHECK (true);



ALTER TABLE "public"."games" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."missions" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."players" ENABLE ROW LEVEL SECURITY;




ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";





GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";











































































































































































GRANT ALL ON FUNCTION "public"."add_player_to_game"("user_email" "text", "game_id" integer) TO "postgres";
GRANT ALL ON FUNCTION "public"."add_player_to_game"("user_email" "text", "game_id" integer) TO "anon";
GRANT ALL ON FUNCTION "public"."add_player_to_game"("user_email" "text", "game_id" integer) TO "authenticated";
GRANT ALL ON FUNCTION "public"."add_player_to_game"("user_email" "text", "game_id" integer) TO "service_role";



GRANT ALL ON FUNCTION "public"."add_self_to_game"("input_game_id" integer) TO "postgres";
GRANT ALL ON FUNCTION "public"."add_self_to_game"("input_game_id" integer) TO "anon";
GRANT ALL ON FUNCTION "public"."add_self_to_game"("input_game_id" integer) TO "authenticated";
GRANT ALL ON FUNCTION "public"."add_self_to_game"("input_game_id" integer) TO "service_role";



GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."games" TO "postgres";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."games" TO "anon";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."games" TO "authenticated";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."games" TO "service_role";



GRANT ALL ON FUNCTION "public"."generate_game_rotation"("input_game_id" integer) TO "postgres";
GRANT ALL ON FUNCTION "public"."generate_game_rotation"("input_game_id" integer) TO "anon";
GRANT ALL ON FUNCTION "public"."generate_game_rotation"("input_game_id" integer) TO "authenticated";
GRANT ALL ON FUNCTION "public"."generate_game_rotation"("input_game_id" integer) TO "service_role";


















GRANT ALL ON SEQUENCE "public"."game_id_seq" TO "postgres";
GRANT ALL ON SEQUENCE "public"."game_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."game_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."game_id_seq" TO "service_role";



GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."missions" TO "postgres";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."missions" TO "anon";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."missions" TO "authenticated";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."missions" TO "service_role";



GRANT ALL ON SEQUENCE "public"."missions_id_seq" TO "postgres";
GRANT ALL ON SEQUENCE "public"."missions_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."missions_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."missions_id_seq" TO "service_role";



GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."players" TO "postgres";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."players" TO "anon";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."players" TO "authenticated";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."players" TO "service_role";



GRANT ALL ON SEQUENCE "public"."player_id_seq" TO "postgres";
GRANT ALL ON SEQUENCE "public"."player_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."player_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."player_id_seq" TO "service_role";









ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO "service_role";






























RESET ALL;
